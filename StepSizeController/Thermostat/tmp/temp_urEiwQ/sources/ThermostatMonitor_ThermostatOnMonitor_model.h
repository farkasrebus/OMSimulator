/* Simulation code for ThermostatMonitor.ThermostatOnMonitor generated by the OpenModelica Compiler OpenModelica 1.12.0~7-g6d56dda. */
#if !defined(ThermostatMonitor_ThermostatOnMonitor__MODEL_H)
#define ThermostatMonitor_ThermostatOnMonitor__MODEL_H
#include "openmodelica.h"
#include "openmodelica_func.h"
#include "simulation_data.h"
#include "simulation/simulation_info_json.h"
#include "simulation/simulation_runtime.h"
#include "util/omc_error.h"
#include "simulation/solver/model_help.h"
#include "simulation/solver/delay.h"
#include "simulation/solver/linearSystem.h"
#include "simulation/solver/nonlinearSystem.h"
#include "simulation/solver/mixedSystem.h"

#include <string.h>

#include "ThermostatMonitor_ThermostatOnMonitor_functions.h"


extern void ThermostatMonitor_ThermostatOnMonitor_callExternalObjectDestructors(DATA *_data, threadData_t *threadData);
#if !defined(OMC_NUM_NONLINEAR_SYSTEMS) || OMC_NUM_NONLINEAR_SYSTEMS>0
#endif
#if !defined(OMC_NUM_LINEAR_SYSTEMS) || OMC_NUM_LINEAR_SYSTEMS>0
#endif
#if !defined(OMC_NUM_MIXED_SYSTEMS) || OMC_NUM_MIXED_SYSTEMS>0
#endif
#if !defined(OMC_NO_STATESELECTION)
extern void ThermostatMonitor_ThermostatOnMonitor_initializeStateSets(int nStateSets, STATE_SET_DATA* statesetData, DATA *data);
#endif
extern int ThermostatMonitor_ThermostatOnMonitor_functionAlgebraics(DATA *data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_function_storeDelayed(DATA *data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_updateBoundVariableAttributes(DATA *data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_functionInitialEquations(DATA *data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_functionInitialEquations_lambda0(DATA *data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_functionRemovedInitialEquations(DATA *data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_updateBoundParameters(DATA *data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_checkForAsserts(DATA *data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_function_ZeroCrossingsEquations(DATA *data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_function_ZeroCrossings(DATA *data, threadData_t *threadData, double* gout);
extern int ThermostatMonitor_ThermostatOnMonitor_function_updateRelations(DATA *data, threadData_t *threadData, int evalZeroCross);
extern int ThermostatMonitor_ThermostatOnMonitor_checkForDiscreteChanges(DATA *data, threadData_t *threadData);
extern const char* ThermostatMonitor_ThermostatOnMonitor_zeroCrossingDescription(int i, int **out_EquationIndexes);
extern const char* ThermostatMonitor_ThermostatOnMonitor_relationDescription(int i);
extern void ThermostatMonitor_ThermostatOnMonitor_function_initSample(DATA *data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_initialAnalyticJacobianG(void* data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_initialAnalyticJacobianA(void* data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_initialAnalyticJacobianB(void* data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_initialAnalyticJacobianC(void* data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_initialAnalyticJacobianD(void* data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_functionJacG_column(void* data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_functionJacA_column(void* data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_functionJacB_column(void* data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_functionJacC_column(void* data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_functionJacD_column(void* data, threadData_t *threadData);
extern const char* ThermostatMonitor_ThermostatOnMonitor_linear_model_frame(void);
extern const char* ThermostatMonitor_ThermostatOnMonitor_linear_model_datarecovery_frame(void);
extern int ThermostatMonitor_ThermostatOnMonitor_mayer(DATA* data, modelica_real** res, short *);
extern int ThermostatMonitor_ThermostatOnMonitor_lagrange(DATA* data, modelica_real** res, short *, short *);
extern int ThermostatMonitor_ThermostatOnMonitor_pickUpBoundsForInputsInOptimization(DATA* data, modelica_real* min, modelica_real* max, modelica_real*nominal, modelica_boolean *useNominal, char ** name, modelica_real * start, modelica_real * startTimeOpt);
extern int ThermostatMonitor_ThermostatOnMonitor_setInputData(DATA *data, const modelica_boolean file);
extern int ThermostatMonitor_ThermostatOnMonitor_getTimeGrid(DATA *data, modelica_integer * nsi, modelica_real**t);
extern void ThermostatMonitor_ThermostatOnMonitor_function_initSynchronous(DATA * data, threadData_t *threadData);
extern void ThermostatMonitor_ThermostatOnMonitor_function_updateSynchronous(DATA * data, threadData_t *threadData, long i);
extern int ThermostatMonitor_ThermostatOnMonitor_function_equationsSynchronous(DATA * data, threadData_t *threadData, long i);
extern void ThermostatMonitor_ThermostatOnMonitor_read_input_fmu(MODEL_DATA* modelData, SIMULATION_INFO* simulationData);
extern void ThermostatMonitor_ThermostatOnMonitor_function_savePreSynchronous(DATA *data, threadData_t *threadData);
extern int ThermostatMonitor_ThermostatOnMonitor_inputNames(DATA* data, char ** names);
extern int ThermostatMonitor_ThermostatOnMonitor_initializeDAEmodeData(DATA *data, DAEMODE_DATA*);
extern int ThermostatMonitor_ThermostatOnMonitor_functionLocalKnownVars(DATA*, threadData_t*);
extern int ThermostatMonitor_ThermostatOnMonitor_symbolicInlineSystem(DATA*, threadData_t*);

#include "ThermostatMonitor_ThermostatOnMonitor_literals.h"




#if defined(HPCOM) && !defined(_OPENMP)
  #error "HPCOM requires OpenMP or the results are wrong"
#endif
#if defined(_OPENMP)
  #include <omp.h>
#else
  /* dummy omp defines */
  #define omp_get_max_threads() 1
#endif

#endif

