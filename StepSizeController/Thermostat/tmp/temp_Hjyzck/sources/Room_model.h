/* Simulation code for Room generated by the OpenModelica Compiler OpenModelica 1.12.0~dev-969-g8d481c1. */
#if !defined(Room__MODEL_H)
#define Room__MODEL_H
#include "openmodelica.h"
#include "openmodelica_func.h"
#include "simulation_data.h"
#include "simulation/simulation_info_json.h"
#include "simulation/simulation_runtime.h"
#include "util/omc_error.h"
#include "simulation/solver/model_help.h"
#include "simulation/solver/delay.h"
#include "simulation/solver/linearSystem.h"
#include "simulation/solver/nonlinearSystem.h"
#include "simulation/solver/mixedSystem.h"

#include <string.h>

#include "Room_functions.h"

#define Buildings_Fluid_Interfaces_ConservationEquation$vol$dynBal_Medium_FluidConstants_index 0
#define Buildings_Fluid_Interfaces_ConservationEquation$vol$dynBal_Medium_GasProperties_index 1
#define Buildings_Fluid_Interfaces_ConservationEquation$vol$dynBal_Medium_GasProperties$dryair_index 2
#define Buildings_Fluid_Interfaces_ConservationEquation$vol$dynBal_Medium_GasProperties$steam_index 3
#define Buildings_Fluid_Interfaces_ConservationEquation$vol$dynBal_Medium_ThermodynamicState_index 4
#define Buildings_Fluid_MixingVolumes_MixingVolume$vol_Medium_FluidConstants_index 5
#define Buildings_Fluid_MixingVolumes_MixingVolume$vol_Medium_GasProperties_index 6
#define Buildings_Fluid_MixingVolumes_MixingVolume$vol_Medium_GasProperties$dryair_index 7
#define Buildings_Fluid_MixingVolumes_MixingVolume$vol_Medium_GasProperties$steam_index 8
#define Buildings_Fluid_MixingVolumes_MixingVolume$vol_Medium_ThermodynamicState_index 9
#define Modelica_Fluid_Vessels_BaseClasses_VesselFluidPorts__b$vol$dynBal$ports_Medium_FluidConstants_index 10
#define Modelica_Fluid_Vessels_BaseClasses_VesselFluidPorts__b$vol$dynBal$ports_Medium_GasProperties_index 11
#define Modelica_Fluid_Vessels_BaseClasses_VesselFluidPorts__b$vol$dynBal$ports_Medium_GasProperties$dryair_index 12
#define Modelica_Fluid_Vessels_BaseClasses_VesselFluidPorts__b$vol$dynBal$ports_Medium_GasProperties$steam_index 13
#define Modelica_Fluid_Vessels_BaseClasses_VesselFluidPorts__b$vol$dynBal$ports_Medium_ThermodynamicState_index 14
#define Modelica_Fluid_Vessels_BaseClasses_VesselFluidPorts__b$vol$ports_Medium_FluidConstants_index 15
#define Modelica_Fluid_Vessels_BaseClasses_VesselFluidPorts__b$vol$ports_Medium_GasProperties_index 16
#define Modelica_Fluid_Vessels_BaseClasses_VesselFluidPorts__b$vol$ports_Medium_GasProperties$dryair_index 17
#define Modelica_Fluid_Vessels_BaseClasses_VesselFluidPorts__b$vol$ports_Medium_GasProperties$steam_index 18
#define Modelica_Fluid_Vessels_BaseClasses_VesselFluidPorts__b$vol$ports_Medium_ThermodynamicState_index 19
#define Modelica_Media_IdealGases_Common_DataRecord_index 20
#define Modelica_Media_IdealGases_Common_DataRecord$Air_index 21
#define Modelica_Media_IdealGases_Common_DataRecord$Ar_index 22
#define Modelica_Media_IdealGases_Common_DataRecord$C2H2__vinylidene_index 23
#define Modelica_Media_IdealGases_Common_DataRecord$C2H4_index 24
#define Modelica_Media_IdealGases_Common_DataRecord$C2H5OH_index 25
#define Modelica_Media_IdealGases_Common_DataRecord$C2H6_index 26
#define Modelica_Media_IdealGases_Common_DataRecord$C3H6__propylene_index 27
#define Modelica_Media_IdealGases_Common_DataRecord$C3H8_index 28
#define Modelica_Media_IdealGases_Common_DataRecord$C4H10__n__butane_index 29
#define Modelica_Media_IdealGases_Common_DataRecord$C4H8__1__butene_index 30
#define Modelica_Media_IdealGases_Common_DataRecord$C5H10__1__pentene_index 31
#define Modelica_Media_IdealGases_Common_DataRecord$C5H12__n__pentane_index 32
#define Modelica_Media_IdealGases_Common_DataRecord$C6H12__1__hexene_index 33
#define Modelica_Media_IdealGases_Common_DataRecord$C6H14__n__hexane_index 34
#define Modelica_Media_IdealGases_Common_DataRecord$C6H6_index 35
#define Modelica_Media_IdealGases_Common_DataRecord$C7H14__1__heptene_index 36
#define Modelica_Media_IdealGases_Common_DataRecord$C7H16__n__heptane_index 37
#define Modelica_Media_IdealGases_Common_DataRecord$C8H10__ethylbenz_index 38
#define Modelica_Media_IdealGases_Common_DataRecord$C8H18__n__octane_index 39
#define Modelica_Media_IdealGases_Common_DataRecord$CH3OH_index 40
#define Modelica_Media_IdealGases_Common_DataRecord$CH4_index 41
#define Modelica_Media_IdealGases_Common_DataRecord$CL2_index 42
#define Modelica_Media_IdealGases_Common_DataRecord$CO_index 43
#define Modelica_Media_IdealGases_Common_DataRecord$CO2_index 44
#define Modelica_Media_IdealGases_Common_DataRecord$F2_index 45
#define Modelica_Media_IdealGases_Common_DataRecord$H2_index 46
#define Modelica_Media_IdealGases_Common_DataRecord$H2O_index 47
#define Modelica_Media_IdealGases_Common_DataRecord$He_index 48
#define Modelica_Media_IdealGases_Common_DataRecord$N2_index 49
#define Modelica_Media_IdealGases_Common_DataRecord$N2O_index 50
#define Modelica_Media_IdealGases_Common_DataRecord$NH3_index 51
#define Modelica_Media_IdealGases_Common_DataRecord$NO_index 52
#define Modelica_Media_IdealGases_Common_DataRecord$NO2_index 53
#define Modelica_Media_IdealGases_Common_DataRecord$Ne_index 54
#define Modelica_Media_IdealGases_Common_DataRecord$O2_index 55
#define Modelica_Media_IdealGases_Common_DataRecord$SO2_index 56
#define Modelica_Media_IdealGases_Common_DataRecord$SO3_index 57
#define Modelica_Media_Interfaces_Types_IdealGas_FluidConstants_index 58
#define Modelica_Media_Interfaces_Types_IdealGas_FluidConstants$H2O_index 59
#define Modelica_Media_Interfaces_Types_IdealGas_FluidConstants$N2_index 60

extern void Room_callExternalObjectDestructors(DATA *_data, threadData_t *threadData);
#if !defined(OMC_NUM_NONLINEAR_SYSTEMS) || OMC_NUM_NONLINEAR_SYSTEMS>0
#endif
#if !defined(OMC_NUM_LINEAR_SYSTEMS) || OMC_NUM_LINEAR_SYSTEMS>0
extern void Room_initialLinearSystem(int nLinearSystems, LINEAR_SYSTEM_DATA *data);
#endif
#if !defined(OMC_NUM_MIXED_SYSTEMS) || OMC_NUM_MIXED_SYSTEMS>0
#endif
#if !defined(OMC_NO_STATESELECTION)
extern void Room_initializeStateSets(int nStateSets, STATE_SET_DATA* statesetData, DATA *data);
#endif
extern int Room_functionAlgebraics(DATA *data, threadData_t *threadData);
extern int Room_function_storeDelayed(DATA *data, threadData_t *threadData);
extern int Room_updateBoundVariableAttributes(DATA *data, threadData_t *threadData);
extern int Room_functionInitialEquations(DATA *data, threadData_t *threadData);
extern int Room_functionInitialEquations_lambda0(DATA *data, threadData_t *threadData);
extern int Room_functionRemovedInitialEquations(DATA *data, threadData_t *threadData);
extern int Room_updateBoundParameters(DATA *data, threadData_t *threadData);
extern int Room_checkForAsserts(DATA *data, threadData_t *threadData);
extern int Room_function_ZeroCrossingsEquations(DATA *data, threadData_t *threadData);
extern int Room_function_ZeroCrossings(DATA *data, threadData_t *threadData, double* gout);
extern int Room_function_updateRelations(DATA *data, threadData_t *threadData, int evalZeroCross);
extern int Room_checkForDiscreteChanges(DATA *data, threadData_t *threadData);
extern const char* Room_zeroCrossingDescription(int i, int **out_EquationIndexes);
extern const char* Room_relationDescription(int i);
extern void Room_function_initSample(DATA *data, threadData_t *threadData);
extern int Room_initialAnalyticJacobianG(void* data, threadData_t *threadData);
extern int Room_initialAnalyticJacobianA(void* data, threadData_t *threadData);
extern int Room_initialAnalyticJacobianB(void* data, threadData_t *threadData);
extern int Room_initialAnalyticJacobianC(void* data, threadData_t *threadData);
extern int Room_initialAnalyticJacobianD(void* data, threadData_t *threadData);
extern int Room_functionJacG_column(void* data, threadData_t *threadData);
extern int Room_functionJacA_column(void* data, threadData_t *threadData);
extern int Room_functionJacB_column(void* data, threadData_t *threadData);
extern int Room_functionJacC_column(void* data, threadData_t *threadData);
extern int Room_functionJacD_column(void* data, threadData_t *threadData);
extern const char* Room_linear_model_frame(void);
extern const char* Room_linear_model_datarecovery_frame(void);
extern int Room_mayer(DATA* data, modelica_real** res, short *);
extern int Room_lagrange(DATA* data, modelica_real** res, short *, short *);
extern int Room_pickUpBoundsForInputsInOptimization(DATA* data, modelica_real* min, modelica_real* max, modelica_real*nominal, modelica_boolean *useNominal, char ** name, modelica_real * start, modelica_real * startTimeOpt);
extern int Room_setInputData(DATA *data, const modelica_boolean file);
extern int Room_getTimeGrid(DATA *data, modelica_integer * nsi, modelica_real**t);
extern void Room_function_initSynchronous(DATA * data, threadData_t *threadData);
extern void Room_function_updateSynchronous(DATA * data, threadData_t *threadData, long i);
extern int Room_function_equationsSynchronous(DATA * data, threadData_t *threadData, long i);
extern void Room_read_input_fmu(MODEL_DATA* modelData, SIMULATION_INFO* simulationData);
extern void Room_function_savePreSynchronous(DATA *data, threadData_t *threadData);
extern int Room_inputNames(DATA* data, char ** names);
extern int Room_initializeDAEmodeData(DATA *data, DAEMODE_DATA*);
extern int Room_functionLocalKnownVars(DATA*, threadData_t*);
extern int Room_symbolicInlineSystem(DATA*, threadData_t*);

#include "Room_literals.h"




#if defined(HPCOM) && !defined(_OPENMP)
  #error "HPCOM requires OpenMP or the results are wrong"
#endif
#if defined(_OPENMP)
  #include <omp.h>
#else
  /* dummy omp defines */
  #define omp_get_max_threads() 1
#endif

#endif

